
Test_ULP_Mode_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d48  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed8  08002ed8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ee0  08002ee0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000010  08002efc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002efc  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afa5  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c36  00000000  00000000  0002b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002cc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a4  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001776f  00000000  00000000  0002dba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5ab  00000000  00000000  00045313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000951fd  00000000  00000000  000508be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f40  00000000  00000000  000e5abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e79fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002dec 	.word	0x08002dec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08002dec 	.word	0x08002dec

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fa5a 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f824 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f8b8 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f868 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "Hello Test_ULP_Mode_001!" ) ;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0x44>)
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f91e 	bl	8000884 <send_debug_logs>
  x = 33 ;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <main+0x48>)
 800064a:	2221      	movs	r2, #33	; 0x21
 800064c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( it == true )
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x4c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <main+0x38>
	  {
		  HAL_Delay ( 5000 ) ;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x50>)
 8000658:	0018      	movs	r0, r3
 800065a:	f000 facb 	bl	8000bf4 <HAL_Delay>
		  it = false ;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_PWR_EnterSTOPMode ( PWR_MAINREGULATOR_ON , PWR_STOPENTRY_WFI ) ;
 8000664:	2101      	movs	r1, #1
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fd96 	bl	8001198 <HAL_PWR_EnterSTOPMode>
	  if ( it == true )
 800066c:	e7ef      	b.n	800064e <main+0x22>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	08002e04 	.word	0x08002e04
 8000674:	200000c0 	.word	0x200000c0
 8000678:	200000c4 	.word	0x200000c4
 800067c:	00001388 	.word	0x00001388

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b093      	sub	sp, #76	; 0x4c
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	2410      	movs	r4, #16
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2338      	movs	r3, #56	; 0x38
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f002 fb15 	bl	8002cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	003b      	movs	r3, r7
 8000698:	0018      	movs	r0, r3
 800069a:	2310      	movs	r3, #16
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f002 fb0e 	bl	8002cc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fdad 	bl	8001208 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2202      	movs	r2, #2
 80006b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	0052      	lsls	r2, r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fde5 	bl	80012a0 <HAL_RCC_OscConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006da:	f000 f92b 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	003b      	movs	r3, r7
 80006e0:	2207      	movs	r2, #7
 80006e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	003b      	movs	r3, r7
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 f8ea 	bl	80018d4 <HAL_RCC_ClockConfig>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000704:	f000 f916 	bl	8000934 <Error_Handler>
  }
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b013      	add	sp, #76	; 0x4c
 800070e:	bd90      	pop	{r4, r7, pc}

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <MX_USART2_UART_Init+0x98>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	0252      	lsls	r2, r2, #9
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fc1c 	bl	8001f98 <HAL_UART_Init>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f8e6 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f9c7 	bl	8002b00 <HAL_UARTEx_SetTxFifoThreshold>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f8dd 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800077c:	2100      	movs	r1, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f002 f9fe 	bl	8002b80 <HAL_UARTEx_SetRxFifoThreshold>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f8d4 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x94>)
 800078e:	0018      	movs	r0, r3
 8000790:	f002 f97c 	bl	8002a8c <HAL_UARTEx_DisableFifoMode>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 f8cc 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	2000002c 	.word	0x2000002c
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	240c      	movs	r4, #12
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	0018      	movs	r0, r3
 80007b8:	2314      	movs	r3, #20
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f002 fa7f 	bl	8002cc0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	2104      	movs	r1, #4
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_GPIO_Init+0xd0>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2204      	movs	r2, #4
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_GPIO_Init+0xd0>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e0:	2120      	movs	r1, #32
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2220      	movs	r2, #32
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fc54 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	0192      	lsls	r2, r2, #6
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2284      	movs	r2, #132	; 0x84
 8000824:	0392      	lsls	r2, r2, #14
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	193b      	adds	r3, r7, r4
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000832:	0019      	movs	r1, r3
 8000834:	0010      	movs	r0, r2
 8000836:	f000 fadf 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 800083a:	0021      	movs	r1, r4
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2220      	movs	r2, #32
 8000840:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2201      	movs	r2, #1
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2202      	movs	r2, #2
 8000852:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8000854:	187a      	adds	r2, r7, r1
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f000 facb 	bl	8000df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2007      	movs	r0, #7
 8000868:	f000 fa94 	bl	8000d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800086c:	2007      	movs	r0, #7
 800086e:	f000 faa6 	bl	8000dbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b009      	add	sp, #36	; 0x24
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40021000 	.word	0x40021000
 8000880:	50000800 	.word	0x50000800

08000884 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fc38 	bl	8000104 <strlen>
 8000894:	0003      	movs	r3, r0
 8000896:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	23fa      	movs	r3, #250	; 0xfa
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	429a      	cmp	r2, r3
 80008a0:	d909      	bls.n	80008b6 <send_debug_logs+0x32>
    {
        HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80008a2:	23fa      	movs	r3, #250	; 0xfa
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	490d      	ldr	r1, [pc, #52]	; (80008dc <send_debug_logs+0x58>)
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <send_debug_logs+0x5c>)
 80008aa:	222a      	movs	r2, #42	; 0x2a
 80008ac:	f001 fbca 	bl	8002044 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80008b0:	23fa      	movs	r3, #250	; 0xfa
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	23fa      	movs	r3, #250	; 0xfa
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <send_debug_logs+0x5c>)
 80008c2:	f001 fbbf 	bl	8002044 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_USB , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80008c6:	23fa      	movs	r3, #250	; 0xfa
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4906      	ldr	r1, [pc, #24]	; (80008e4 <send_debug_logs+0x60>)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <send_debug_logs+0x5c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	f001 fbb8 	bl	8002044 <HAL_UART_Transmit>
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b004      	add	sp, #16
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	08002e20 	.word	0x08002e20
 80008e0:	2000002c 	.word	0x2000002c
 80008e4:	08002e4c 	.word	0x08002e4c

080008e8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback ( uint16_t GPIO_Pin )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dbb      	adds	r3, r7, #6
 80008f2:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == GPIO_PIN_13 )
 80008f4:	1dbb      	adds	r3, r7, #6
 80008f6:	881a      	ldrh	r2, [r3, #0]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	019b      	lsls	r3, r3, #6
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d111      	bne.n	8000924 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
	{
		x++ ;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8000908:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin ( LDG_GPIO_Port , LDG_Pin ) ;
 800090a:	23a0      	movs	r3, #160	; 0xa0
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2120      	movs	r1, #32
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fbf2 	bl	80010fa <HAL_GPIO_TogglePin>
		send_debug_logs ( (char*) &x ) ;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ffb3 	bl	8000884 <send_debug_logs>
		it = true ;
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
	}
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000c0 	.word	0x200000c0
 8000930:	200000c4 	.word	0x200000c4

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	641a      	str	r2, [r3, #64]	; 0x40
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0549      	lsls	r1, r1, #21
 8000968:	430a      	orrs	r2, r1
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_MspInit+0x44>)
 800096e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	055b      	lsls	r3, r3, #21
 8000974:	4013      	ands	r3, r2
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b097      	sub	sp, #92	; 0x5c
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	2344      	movs	r3, #68	; 0x44
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	0018      	movs	r0, r3
 8000996:	2314      	movs	r3, #20
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f002 f990 	bl	8002cc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	2410      	movs	r4, #16
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	2334      	movs	r3, #52	; 0x34
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f002 f988 	bl	8002cc0 <memset>
  if(huart->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <HAL_UART_MspInit+0xb8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d13e      	bne.n	8000a38 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2202      	movs	r2, #2
 80009be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f92d 	bl	8001c28 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009d2:	f7ff ffaf 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0289      	lsls	r1, r1, #10
 80009e0:	430a      	orrs	r2, r1
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_MspInit+0xbc>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	2201      	movs	r2, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a0a:	2144      	movs	r1, #68	; 0x44
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2202      	movs	r2, #2
 8000a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2201      	movs	r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	187a      	adds	r2, r7, r1
 8000a2c:	23a0      	movs	r3, #160	; 0xa0
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 f9e0 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b017      	add	sp, #92	; 0x5c
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f8a6 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 fb56 	bl	8001130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a98:	f7ff fff7 	bl	8000a8a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ac2:	f002 f905 	bl	8002cd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ac6:	f7ff fdb1 	bl	800062c <main>

08000aca <LoopForever>:

LoopForever:
  b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   r0, =_estack
 8000acc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ad8:	08002eec 	.word	0x08002eec
  ldr r2, =_sbss
 8000adc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae0:	20000264 	.word	0x20000264

08000ae4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_COMP_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x3c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_Init+0x3c>)
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	0049      	lsls	r1, r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f810 	bl	8000b28 <HAL_InitTick>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e001      	b.n	8000b18 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff ff14 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_InitTick+0x88>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d02b      	beq.n	8000b98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0x8c>)
 8000b42:	681c      	ldr	r4, [r3, #0]
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_InitTick+0x88>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	0019      	movs	r1, r3
 8000b4a:	23fa      	movs	r3, #250	; 0xfa
 8000b4c:	0098      	lsls	r0, r3, #2
 8000b4e:	f7ff fae1 	bl	8000114 <__udivsi3>
 8000b52:	0003      	movs	r3, r0
 8000b54:	0019      	movs	r1, r3
 8000b56:	0020      	movs	r0, r4
 8000b58:	f7ff fadc 	bl	8000114 <__udivsi3>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 f93d 	bl	8000dde <HAL_SYSTICK_Config>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d112      	bne.n	8000b8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d80a      	bhi.n	8000b84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2301      	movs	r3, #1
 8000b72:	425b      	negs	r3, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 f90c 	bl	8000d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_InitTick+0x90>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e00d      	b.n	8000ba0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e008      	b.n	8000ba0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b8e:	230f      	movs	r3, #15
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e003      	b.n	8000ba0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b005      	add	sp, #20
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	18d2      	adds	r2, r2, r3
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_IncTick+0x20>)
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	200000c8 	.word	0x200000c8

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	200000c8 	.word	0x200000c8

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff fff0 	bl	8000be0 <HAL_GetTick>
 8000c00:	0003      	movs	r3, r0
 8000c02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001a      	movs	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	189b      	adds	r3, r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	f7ff ffe0 	bl	8000be0 <HAL_GetTick>
 8000c20:	0002      	movs	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000008 	.word	0x20000008

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c4e:	d809      	bhi.n	8000c64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	231f      	movs	r3, #31
 8000c58:	401a      	ands	r2, r3
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_EnableIRQ+0x30>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	000a      	movs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b7f      	cmp	r3, #127	; 0x7f
 8000c84:	d828      	bhi.n	8000cd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c86:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <__NVIC_SetPriority+0xd4>)
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	33c0      	adds	r3, #192	; 0xc0
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	589b      	ldr	r3, [r3, r2]
 8000c96:	1dfa      	adds	r2, r7, #7
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	00d2      	lsls	r2, r2, #3
 8000ca2:	21ff      	movs	r1, #255	; 0xff
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	401a      	ands	r2, r3
 8000cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	019b      	lsls	r3, r3, #6
 8000cb2:	22ff      	movs	r2, #255	; 0xff
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	4003      	ands	r3, r0
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	481f      	ldr	r0, [pc, #124]	; (8000d44 <__NVIC_SetPriority+0xd4>)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	33c0      	adds	r3, #192	; 0xc0
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cd6:	e031      	b.n	8000d3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <__NVIC_SetPriority+0xd8>)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0019      	movs	r1, r3
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	3b08      	subs	r3, #8
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3306      	adds	r3, #6
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	3304      	adds	r3, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1dfa      	adds	r2, r7, #7
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	00d2      	lsls	r2, r2, #3
 8000cfe:	21ff      	movs	r1, #255	; 0xff
 8000d00:	4091      	lsls	r1, r2
 8000d02:	000a      	movs	r2, r1
 8000d04:	43d2      	mvns	r2, r2
 8000d06:	401a      	ands	r2, r3
 8000d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	401a      	ands	r2, r3
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	2303      	movs	r3, #3
 8000d1a:	4003      	ands	r3, r0
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <__NVIC_SetPriority+0xd8>)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001c      	movs	r4, r3
 8000d28:	230f      	movs	r3, #15
 8000d2a:	4023      	ands	r3, r4
 8000d2c:	3b08      	subs	r3, #8
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	430a      	orrs	r2, r1
 8000d32:	3306      	adds	r3, #6
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	18c3      	adds	r3, r0, r3
 8000d38:	3304      	adds	r3, #4
 8000d3a:	601a      	str	r2, [r3, #0]
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b003      	add	sp, #12
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	045b      	lsls	r3, r3, #17
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d301      	bcc.n	8000d64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d60:	2301      	movs	r3, #1
 8000d62:	e010      	b.n	8000d86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <SysTick_Config+0x44>)
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	425b      	negs	r3, r3
 8000d70:	2103      	movs	r1, #3
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff ff7c 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x44>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x44>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	210f      	movs	r1, #15
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	1c02      	adds	r2, r0, #0
 8000da4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ff33 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff ffaf 	bl	8000d4c <SysTick_Config>
 8000dee:	0003      	movs	r3, r0
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e147      	b.n	8001098 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d100      	bne.n	8000e20 <HAL_GPIO_Init+0x28>
 8000e1e:	e138      	b.n	8001092 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	409a      	lsls	r2, r3
 8000e46:	0013      	movs	r3, r2
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	409a      	lsls	r2, r3
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	2201      	movs	r2, #1
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d017      	beq.n	8000ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2203      	movs	r2, #3
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	58d3      	ldr	r3, [r2, r3]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2107      	movs	r1, #7
 8000f0e:	400b      	ands	r3, r1
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	6939      	ldr	r1, [r7, #16]
 8000f28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2203      	movs	r2, #3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	23c0      	movs	r3, #192	; 0xc0
 8000f64:	029b      	lsls	r3, r3, #10
 8000f66:	4013      	ands	r3, r2
 8000f68:	d100      	bne.n	8000f6c <HAL_GPIO_Init+0x174>
 8000f6a:	e092      	b.n	8001092 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f6c:	4a50      	ldr	r2, [pc, #320]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3318      	adds	r3, #24
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	589b      	ldr	r3, [r3, r2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	220f      	movs	r2, #15
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x1ca>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a45      	ldr	r2, [pc, #276]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x1c6>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <HAL_GPIO_Init+0x2c0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x1c2>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a43      	ldr	r2, [pc, #268]	; (80010bc <HAL_GPIO_Init+0x2c4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x1be>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x1cc>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x1cc>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x1cc>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x1cc>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	400a      	ands	r2, r1
 8000fca:	00d2      	lsls	r2, r2, #3
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fd4:	4936      	ldr	r1, [pc, #216]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3318      	adds	r3, #24
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	035b      	lsls	r3, r3, #13
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800100c:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	039b      	lsls	r3, r3, #14
 8001024:	4013      	ands	r3, r2
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8001038:	2384      	movs	r3, #132	; 0x84
 800103a:	58d3      	ldr	r3, [r2, r3]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800105c:	4914      	ldr	r1, [pc, #80]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 800105e:	2284      	movs	r2, #132	; 0x84
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	58d3      	ldr	r3, [r2, r3]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	4013      	ands	r3, r2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800108a:	4909      	ldr	r1, [pc, #36]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	40da      	lsrs	r2, r3
 80010a0:	1e13      	subs	r3, r2, #0
 80010a2:	d000      	beq.n	80010a6 <HAL_GPIO_Init+0x2ae>
 80010a4:	e6b0      	b.n	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b006      	add	sp, #24
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021800 	.word	0x40021800
 80010b4:	50000400 	.word	0x50000400
 80010b8:	50000800 	.word	0x50000800
 80010bc:	50000c00 	.word	0x50000c00

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	0008      	movs	r0, r1
 80010ca:	0011      	movs	r1, r2
 80010cc:	1cbb      	adds	r3, r7, #2
 80010ce:	1c02      	adds	r2, r0, #0
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	1c7b      	adds	r3, r7, #1
 80010d4:	1c0a      	adds	r2, r1, #0
 80010d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d8:	1c7b      	adds	r3, r7, #1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e0:	1cbb      	adds	r3, r7, #2
 80010e2:	881a      	ldrh	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ea:	1cbb      	adds	r3, r7, #2
 80010ec:	881a      	ldrh	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	000a      	movs	r2, r1
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800110e:	1cbb      	adds	r3, r7, #2
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4013      	ands	r3, r2
 8001116:	041a      	lsls	r2, r3, #16
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43db      	mvns	r3, r3
 800111c:	1cb9      	adds	r1, r7, #2
 800111e:	8809      	ldrh	r1, [r1, #0]
 8001120:	400b      	ands	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	0002      	movs	r2, r0
 8001138:	1dbb      	adds	r3, r7, #6
 800113a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	1dba      	adds	r2, r7, #6
 8001142:	8812      	ldrh	r2, [r2, #0]
 8001144:	4013      	ands	r3, r2
 8001146:	d008      	beq.n	800115a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800114a:	1dba      	adds	r2, r7, #6
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001150:	1dbb      	adds	r3, r7, #6
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	0018      	movs	r0, r3
 8001156:	f000 f815 	bl	8001184 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	1dba      	adds	r2, r7, #6
 8001160:	8812      	ldrh	r2, [r2, #0]
 8001162:	4013      	ands	r3, r2
 8001164:	d008      	beq.n	8001178 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001168:	1dba      	adds	r2, r7, #6
 800116a:	8812      	ldrh	r2, [r2, #0]
 800116c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	0018      	movs	r0, r3
 8001174:	f7ff fbb8 	bl	80008e8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021800 	.word	0x40021800

08001184 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	1dbb      	adds	r3, r7, #6
 800118e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	000a      	movs	r2, r1
 80011a2:	1cfb      	adds	r3, r7, #3
 80011a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d009      	beq.n	80011c0 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_PWR_EnterSTOPMode+0x68>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2207      	movs	r2, #7
 80011b2:	4393      	bics	r3, r2
 80011b4:	001a      	movs	r2, r3
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_PWR_EnterSTOPMode+0x68>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e005      	b.n	80011cc <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_PWR_EnterSTOPMode+0x68>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_PWR_EnterSTOPMode+0x68>)
 80011c6:	2107      	movs	r1, #7
 80011c8:	438a      	bics	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_PWR_EnterSTOPMode+0x6c>)
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_PWR_EnterSTOPMode+0x6c>)
 80011d2:	2104      	movs	r1, #4
 80011d4:	430a      	orrs	r2, r1
 80011d6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80011d8:	1cfb      	adds	r3, r7, #3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011e0:	bf30      	wfi
 80011e2:	e002      	b.n	80011ea <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011e4:	bf40      	sev
    __WFE();
 80011e6:	bf20      	wfe
    __WFE();
 80011e8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_PWR_EnterSTOPMode+0x6c>)
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_PWR_EnterSTOPMode+0x6c>)
 80011f0:	2104      	movs	r1, #4
 80011f2:	438a      	bics	r2, r1
 80011f4:	611a      	str	r2, [r3, #16]
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40007000 	.word	0x40007000
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001216:	4013      	ands	r3, r2
 8001218:	0019      	movs	r1, r3
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	429a      	cmp	r2, r3
 800122a:	d11f      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	0013      	movs	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	189b      	adds	r3, r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4912      	ldr	r1, [pc, #72]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800123a:	0018      	movs	r0, r3
 800123c:	f7fe ff6a 	bl	8000114 <__udivsi3>
 8001240:	0003      	movs	r3, r0
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001246:	e008      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3b01      	subs	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e001      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e009      	b.n	800126e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	401a      	ands	r2, r3
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	429a      	cmp	r2, r3
 800126a:	d0ed      	beq.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	40007000 	.word	0x40007000
 800127c:	fffff9ff 	.word	0xfffff9ff
 8001280:	20000000 	.word	0x20000000
 8001284:	000f4240 	.word	0x000f4240

08001288 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <LL_RCC_GetAPB1Prescaler+0x14>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	23e0      	movs	r3, #224	; 0xe0
 8001292:	01db      	lsls	r3, r3, #7
 8001294:	4013      	ands	r3, r2
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e2fe      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4013      	ands	r3, r2
 80012ba:	d100      	bne.n	80012be <HAL_RCC_OscConfig+0x1e>
 80012bc:	e07c      	b.n	80013b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012be:	4bc3      	ldr	r3, [pc, #780]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2238      	movs	r2, #56	; 0x38
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c8:	4bc0      	ldr	r3, [pc, #768]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4013      	ands	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	d102      	bne.n	80012de <HAL_RCC_OscConfig+0x3e>
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d002      	beq.n	80012e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4bb9      	ldr	r3, [pc, #740]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	029b      	lsls	r3, r3, #10
 80012ec:	4013      	ands	r3, r2
 80012ee:	d062      	beq.n	80013b6 <HAL_RCC_OscConfig+0x116>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d15e      	bne.n	80013b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e2d9      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	025b      	lsls	r3, r3, #9
 8001304:	429a      	cmp	r2, r3
 8001306:	d107      	bne.n	8001318 <HAL_RCC_OscConfig+0x78>
 8001308:	4bb0      	ldr	r3, [pc, #704]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4baf      	ldr	r3, [pc, #700]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	0249      	lsls	r1, r1, #9
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e020      	b.n	800135a <HAL_RCC_OscConfig+0xba>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	23a0      	movs	r3, #160	; 0xa0
 800131e:	02db      	lsls	r3, r3, #11
 8001320:	429a      	cmp	r2, r3
 8001322:	d10e      	bne.n	8001342 <HAL_RCC_OscConfig+0xa2>
 8001324:	4ba9      	ldr	r3, [pc, #676]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4ba8      	ldr	r3, [pc, #672]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	02c9      	lsls	r1, r1, #11
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	4ba6      	ldr	r3, [pc, #664]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4ba5      	ldr	r3, [pc, #660]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0249      	lsls	r1, r1, #9
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e00b      	b.n	800135a <HAL_RCC_OscConfig+0xba>
 8001342:	4ba2      	ldr	r3, [pc, #648]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4ba1      	ldr	r3, [pc, #644]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001348:	49a1      	ldr	r1, [pc, #644]	; (80015d0 <HAL_RCC_OscConfig+0x330>)
 800134a:	400a      	ands	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4b9f      	ldr	r3, [pc, #636]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b9e      	ldr	r3, [pc, #632]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001354:	499f      	ldr	r1, [pc, #636]	; (80015d4 <HAL_RCC_OscConfig+0x334>)
 8001356:	400a      	ands	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d014      	beq.n	800138c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001362:	f7ff fc3d 	bl	8000be0 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fc38 	bl	8000be0 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e298      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137e:	4b93      	ldr	r3, [pc, #588]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xcc>
 800138a:	e015      	b.n	80013b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fc28 	bl	8000be0 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fc23 	bl	8000be0 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e283      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013a8:	4b88      	ldr	r3, [pc, #544]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	029b      	lsls	r3, r3, #10
 80013b0:	4013      	ands	r3, r2
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0xf6>
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d100      	bne.n	80013c4 <HAL_RCC_OscConfig+0x124>
 80013c2:	e099      	b.n	80014f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c4:	4b81      	ldr	r3, [pc, #516]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2238      	movs	r2, #56	; 0x38
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ce:	4b7f      	ldr	r3, [pc, #508]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x144>
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d002      	beq.n	80013ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d135      	bne.n	8001456 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4013      	ands	r3, r2
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x162>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e256      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a74      	ldr	r2, [pc, #464]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001408:	4013      	ands	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	021a      	lsls	r2, r3, #8
 8001412:	4b6e      	ldr	r3, [pc, #440]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d112      	bne.n	8001444 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800141e:	4b6b      	ldr	r3, [pc, #428]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6e      	ldr	r2, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001424:	4013      	ands	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0adb      	lsrs	r3, r3, #11
 8001438:	2207      	movs	r2, #7
 800143a:	4013      	ands	r3, r2
 800143c:	4a68      	ldr	r2, [pc, #416]	; (80015e0 <HAL_RCC_OscConfig+0x340>)
 800143e:	40da      	lsrs	r2, r3
 8001440:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 8001442:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x348>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fb6d 	bl	8000b28 <HAL_InitTick>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d051      	beq.n	80014f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e22c      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d030      	beq.n	80014c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a5e      	ldr	r2, [pc, #376]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001464:	4013      	ands	r3, r2
 8001466:	0019      	movs	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001472:	4b56      	ldr	r3, [pc, #344]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	0049      	lsls	r1, r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fbae 	bl	8000be0 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fba9 	bl	8000be0 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e209      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149c:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	021a      	lsls	r2, r3, #8
 80014b8:	4b44      	ldr	r3, [pc, #272]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	e01b      	b.n	80014f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80014c6:	4949      	ldr	r1, [pc, #292]	; (80015ec <HAL_RCC_OscConfig+0x34c>)
 80014c8:	400a      	ands	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb88 	bl	8000be0 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb83 	bl	8000be0 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1e3      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e8:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4013      	ands	r3, r2
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x236>
 80014f4:	e000      	b.n	80014f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	4013      	ands	r3, r2
 8001500:	d047      	beq.n	8001592 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001502:	4b32      	ldr	r3, [pc, #200]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2238      	movs	r2, #56	; 0x38
 8001508:	4013      	ands	r3, r2
 800150a:	2b18      	cmp	r3, #24
 800150c:	d10a      	bne.n	8001524 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	2202      	movs	r2, #2
 8001514:	4013      	ands	r3, r2
 8001516:	d03c      	beq.n	8001592 <HAL_RCC_OscConfig+0x2f2>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d138      	bne.n	8001592 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e1c5      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d019      	beq.n	8001560 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800152e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001532:	2101      	movs	r1, #1
 8001534:	430a      	orrs	r2, r1
 8001536:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fb52 	bl	8000be0 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fb4d 	bl	8000be0 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1ad      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001558:	2202      	movs	r2, #2
 800155a:	4013      	ands	r3, r2
 800155c:	d0f1      	beq.n	8001542 <HAL_RCC_OscConfig+0x2a2>
 800155e:	e018      	b.n	8001592 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 8001566:	2101      	movs	r1, #1
 8001568:	438a      	bics	r2, r1
 800156a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb38 	bl	8000be0 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fb33 	bl	8000be0 <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e193      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 800158a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158c:	2202      	movs	r2, #2
 800158e:	4013      	ands	r3, r2
 8001590:	d1f1      	bne.n	8001576 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2204      	movs	r2, #4
 8001598:	4013      	ands	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_RCC_OscConfig+0x2fe>
 800159c:	e0c6      	b.n	800172c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	231f      	movs	r3, #31
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2238      	movs	r2, #56	; 0x38
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d11e      	bne.n	80015f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_RCC_OscConfig+0x32c>)
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d100      	bne.n	80015be <HAL_RCC_OscConfig+0x31e>
 80015bc:	e0b6      	b.n	800172c <HAL_RCC_OscConfig+0x48c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d000      	beq.n	80015c8 <HAL_RCC_OscConfig+0x328>
 80015c6:	e0b1      	b.n	800172c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e171      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
 80015cc:	40021000 	.word	0x40021000
 80015d0:	fffeffff 	.word	0xfffeffff
 80015d4:	fffbffff 	.word	0xfffbffff
 80015d8:	ffff80ff 	.word	0xffff80ff
 80015dc:	ffffc7ff 	.word	0xffffc7ff
 80015e0:	00f42400 	.word	0x00f42400
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004
 80015ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015f0:	4bb1      	ldr	r3, [pc, #708]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80015f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	4013      	ands	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x360>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x362>
 8001600:	2300      	movs	r3, #0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d011      	beq.n	800162a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4bac      	ldr	r3, [pc, #688]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800160a:	4bab      	ldr	r3, [pc, #684]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0549      	lsls	r1, r1, #21
 8001610:	430a      	orrs	r2, r1
 8001612:	63da      	str	r2, [r3, #60]	; 0x3c
 8001614:	4ba8      	ldr	r3, [pc, #672]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	055b      	lsls	r3, r3, #21
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001622:	231f      	movs	r3, #31
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	4ba4      	ldr	r3, [pc, #656]	; (80018bc <HAL_RCC_OscConfig+0x61c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4013      	ands	r3, r2
 8001634:	d11a      	bne.n	800166c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001636:	4ba1      	ldr	r3, [pc, #644]	; (80018bc <HAL_RCC_OscConfig+0x61c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <HAL_RCC_OscConfig+0x61c>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0049      	lsls	r1, r1, #1
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001644:	f7ff facc 	bl	8000be0 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fac7 	bl	8000be0 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e127      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001660:	4b96      	ldr	r3, [pc, #600]	; (80018bc <HAL_RCC_OscConfig+0x61c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4013      	ands	r3, r2
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x3e2>
 8001674:	4b90      	ldr	r3, [pc, #576]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001678:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001680:	e01c      	b.n	80016bc <HAL_RCC_OscConfig+0x41c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x404>
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 800168c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800168e:	4b8a      	ldr	r3, [pc, #552]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001690:	2104      	movs	r1, #4
 8001692:	430a      	orrs	r2, r1
 8001694:	65da      	str	r2, [r3, #92]	; 0x5c
 8001696:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800169a:	4b87      	ldr	r3, [pc, #540]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x41c>
 80016a4:	4b84      	ldr	r3, [pc, #528]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80016a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016a8:	4b83      	ldr	r3, [pc, #524]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	438a      	bics	r2, r1
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80016b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b4:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80016b6:	2104      	movs	r1, #4
 80016b8:	438a      	bics	r2, r1
 80016ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa8c 	bl	8000be0 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016cc:	e009      	b.n	80016e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fa87 	bl	8000be0 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a79      	ldr	r2, [pc, #484]	; (80018c0 <HAL_RCC_OscConfig+0x620>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e0e6      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2202      	movs	r2, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x42e>
 80016ec:	e013      	b.n	8001716 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa77 	bl	8000be0 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f6:	e009      	b.n	800170c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fa72 	bl	8000be0 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	4a6f      	ldr	r2, [pc, #444]	; (80018c0 <HAL_RCC_OscConfig+0x620>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0d1      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 800170e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001716:	231f      	movs	r3, #31
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001724:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001726:	4967      	ldr	r1, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x624>)
 8001728:	400a      	ands	r2, r1
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d100      	bne.n	8001736 <HAL_RCC_OscConfig+0x496>
 8001734:	e0bb      	b.n	80018ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001736:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2238      	movs	r2, #56	; 0x38
 800173c:	4013      	ands	r3, r2
 800173e:	2b10      	cmp	r3, #16
 8001740:	d100      	bne.n	8001744 <HAL_RCC_OscConfig+0x4a4>
 8001742:	e07b      	b.n	800183c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d156      	bne.n	80017fa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001752:	495d      	ldr	r1, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x628>)
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fa42 	bl	8000be0 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fa3d 	bl	8000be0 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e09d      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	049b      	lsls	r3, r3, #18
 800177c:	4013      	ands	r3, r2
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001780:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_RCC_OscConfig+0x62c>)
 8001786:	4013      	ands	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0449      	lsls	r1, r1, #17
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	0549      	lsls	r1, r1, #21
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fa06 	bl	8000be0 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fa01 	bl	8000be0 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e061      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	049b      	lsls	r3, r3, #18
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x53a>
 80017f8:	e059      	b.n	80018ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001800:	4931      	ldr	r1, [pc, #196]	; (80018c8 <HAL_RCC_OscConfig+0x628>)
 8001802:	400a      	ands	r2, r1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff f9eb 	bl	8000be0 <HAL_GetTick>
 800180a:	0003      	movs	r3, r0
 800180c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff f9e6 	bl	8000be0 <HAL_GetTick>
 8001814:	0002      	movs	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e046      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	049b      	lsls	r3, r3, #18
 800182a:	4013      	ands	r3, r2
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 8001834:	4926      	ldr	r1, [pc, #152]	; (80018d0 <HAL_RCC_OscConfig+0x630>)
 8001836:	400a      	ands	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e038      	b.n	80018ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e033      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x618>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2203      	movs	r2, #3
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	429a      	cmp	r2, r3
 800185a:	d126      	bne.n	80018aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2270      	movs	r2, #112	; 0x70
 8001860:	401a      	ands	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d11f      	bne.n	80018aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	23fe      	movs	r3, #254	; 0xfe
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d116      	bne.n	80018aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	23f8      	movs	r3, #248	; 0xf8
 8001880:	039b      	lsls	r3, r3, #14
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d10e      	bne.n	80018aa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	23e0      	movs	r3, #224	; 0xe0
 8001890:	051b      	lsls	r3, r3, #20
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	0f5b      	lsrs	r3, r3, #29
 80018a0:	075a      	lsls	r2, r3, #29
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b008      	add	sp, #32
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	00001388 	.word	0x00001388
 80018c4:	efffffff 	.word	0xefffffff
 80018c8:	feffffff 	.word	0xfeffffff
 80018cc:	11c1808c 	.word	0x11c1808c
 80018d0:	eefefffc 	.word	0xeefefffc

080018d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0e9      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2207      	movs	r2, #7
 80018ee:	4013      	ands	r3, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d91e      	bls.n	8001934 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	4b70      	ldr	r3, [pc, #448]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001908:	f7ff f96a 	bl	8000be0 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001910:	e009      	b.n	8001926 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7ff f965 	bl	8000be0 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a6a      	ldr	r2, [pc, #424]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0ca      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2207      	movs	r2, #7
 800192c:	4013      	ands	r3, r2
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d015      	beq.n	800196a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2204      	movs	r2, #4
 8001944:	4013      	ands	r3, r2
 8001946:	d006      	beq.n	8001956 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001948:	4b60      	ldr	r3, [pc, #384]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 800194e:	21e0      	movs	r1, #224	; 0xe0
 8001950:	01c9      	lsls	r1, r1, #7
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a5d      	ldr	r2, [pc, #372]	; (8001ad0 <HAL_RCC_ClockConfig+0x1fc>)
 800195c:	4013      	ands	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d057      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d107      	bne.n	800198c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4013      	ands	r3, r2
 8001986:	d12b      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e097      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	049b      	lsls	r3, r3, #18
 800199c:	4013      	ands	r3, r2
 800199e:	d11f      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e08b      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4013      	ands	r3, r2
 80019b6:	d113      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e07f      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c8:	2202      	movs	r2, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	d108      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e074      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e06d      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e0:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2207      	movs	r2, #7
 80019e6:	4393      	bics	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f4:	f7ff f8f4 	bl	8000be0 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7ff f8ef 	bl	8000be0 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e054      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2238      	movs	r2, #56	; 0x38
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1ec      	bne.n	80019fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d21e      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2207      	movs	r2, #7
 8001a38:	4393      	bics	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a44:	f7ff f8cc 	bl	8000be0 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7ff f8c7 	bl	8000be0 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e02c      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2207      	movs	r2, #7
 8001a68:	4013      	ands	r3, r2
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1ee      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	4013      	ands	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <HAL_RCC_ClockConfig+0x200>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a8e:	f000 f829 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001a92:	0001      	movs	r1, r0
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x204>)
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	58d3      	ldr	r3, [r2, r3]
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	40da      	lsrs	r2, r3
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x208>)
 8001aae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x20c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff f837 	bl	8000b28 <HAL_InitTick>
 8001aba:	0003      	movs	r3, r0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	00001388 	.word	0x00001388
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	fffff0ff 	.word	0xfffff0ff
 8001ad4:	ffff8fff 	.word	0xffff8fff
 8001ad8:	08002e50 	.word	0x08002e50
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2238      	movs	r2, #56	; 0x38
 8001af0:	4013      	ands	r3, r2
 8001af2:	d10f      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0adb      	lsrs	r3, r3, #11
 8001afa:	2207      	movs	r2, #7
 8001afc:	4013      	ands	r3, r2
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	0013      	movs	r3, r2
 8001b04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b06:	6839      	ldr	r1, [r7, #0]
 8001b08:	4835      	ldr	r0, [pc, #212]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b0a:	f7fe fb03 	bl	8000114 <__udivsi3>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	e05d      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d102      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e054      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2238      	movs	r2, #56	; 0x38
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d138      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	3301      	adds	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d10d      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4824      	ldr	r0, [pc, #144]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b54:	f7fe fade 	bl	8000114 <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	227f      	movs	r2, #127	; 0x7f
 8001b64:	4013      	ands	r3, r2
 8001b66:	434b      	muls	r3, r1
 8001b68:	617b      	str	r3, [r7, #20]
        break;
 8001b6a:	e00d      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	481c      	ldr	r0, [pc, #112]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b70:	f7fe fad0 	bl	8000114 <__udivsi3>
 8001b74:	0003      	movs	r3, r0
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	227f      	movs	r2, #127	; 0x7f
 8001b80:	4013      	ands	r3, r2
 8001b82:	434b      	muls	r3, r1
 8001b84:	617b      	str	r3, [r7, #20]
        break;
 8001b86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0f5b      	lsrs	r3, r3, #29
 8001b8e:	2207      	movs	r2, #7
 8001b90:	4013      	ands	r3, r2
 8001b92:	3301      	adds	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	6978      	ldr	r0, [r7, #20]
 8001b9a:	f7fe fabb 	bl	8000114 <__udivsi3>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e015      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2238      	movs	r2, #56	; 0x38
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d103      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2238      	movs	r2, #56	; 0x38
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b18      	cmp	r3, #24
 8001bc2:	d103      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bc4:	23fa      	movs	r3, #250	; 0xfa
 8001bc6:	01db      	lsls	r3, r3, #7
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	e001      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bd0:	693b      	ldr	r3, [r7, #16]
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b006      	add	sp, #24
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	007a1200 	.word	0x007a1200

08001be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c00:	f7ff fff2 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c04:	0004      	movs	r4, r0
 8001c06:	f7ff fb3f 	bl	8001288 <LL_RCC_GetAPB1Prescaler>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	0b1a      	lsrs	r2, r3, #12
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	58d3      	ldr	r3, [r2, r3]
 8001c14:	221f      	movs	r2, #31
 8001c16:	4013      	ands	r3, r2
 8001c18:	40dc      	lsrs	r4, r3
 8001c1a:	0023      	movs	r3, r4
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bdb0      	pop	{r4, r5, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	08002e90 	.word	0x08002e90

08001c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c30:	2313      	movs	r3, #19
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c38:	2312      	movs	r3, #18
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c4c:	e0a3      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2011      	movs	r0, #17
 8001c50:	183b      	adds	r3, r7, r0
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4bc3      	ldr	r3, [pc, #780]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	055b      	lsls	r3, r3, #21
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d110      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4bc0      	ldr	r3, [pc, #768]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c66:	4bbf      	ldr	r3, [pc, #764]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0549      	lsls	r1, r1, #21
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c70:	4bbc      	ldr	r3, [pc, #752]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	055b      	lsls	r3, r3, #21
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7e:	183b      	adds	r3, r7, r0
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c84:	4bb8      	ldr	r3, [pc, #736]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4bb7      	ldr	r3, [pc, #732]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	0049      	lsls	r1, r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c92:	f7fe ffa5 	bl	8000be0 <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9c:	f7fe ffa0 	bl	8000be0 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d904      	bls.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001caa:	2313      	movs	r3, #19
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2203      	movs	r2, #3
 8001cb0:	701a      	strb	r2, [r3, #0]
        break;
 8001cb2:	e005      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb4:	4bac      	ldr	r3, [pc, #688]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d0ed      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cc0:	2313      	movs	r3, #19
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d154      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cca:	4ba6      	ldr	r3, [pc, #664]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ccc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cce:	23c0      	movs	r3, #192	; 0xc0
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d019      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d014      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ce6:	4b9f      	ldr	r3, [pc, #636]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	4aa0      	ldr	r2, [pc, #640]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cf0:	4b9c      	ldr	r3, [pc, #624]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf4:	4b9b      	ldr	r3, [pc, #620]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	0249      	lsls	r1, r1, #9
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfe:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d02:	4b98      	ldr	r3, [pc, #608]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d04:	499a      	ldr	r1, [pc, #616]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001d06:	400a      	ands	r2, r1
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d0a:	4b96      	ldr	r3, [pc, #600]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d016      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7fe ff62 	bl	8000be0 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d20:	e00c      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe ff5d 	bl	8000be0 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a91      	ldr	r2, [pc, #580]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d904      	bls.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d32:	2313      	movs	r3, #19
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2203      	movs	r2, #3
 8001d38:	701a      	strb	r2, [r3, #0]
            break;
 8001d3a:	e004      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3c:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d0ed      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d46:	2313      	movs	r3, #19
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	4a85      	ldr	r2, [pc, #532]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5e:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d64:	e00c      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d66:	2312      	movs	r3, #18
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2213      	movs	r2, #19
 8001d6c:	18ba      	adds	r2, r7, r2
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e005      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d74:	2312      	movs	r3, #18
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2213      	movs	r2, #19
 8001d7a:	18ba      	adds	r2, r7, r2
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d80:	2311      	movs	r3, #17
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d105      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d8e:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d90:	4979      	ldr	r1, [pc, #484]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d009      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001da0:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	2203      	movs	r2, #3
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d009      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dbe:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	4393      	bics	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ddc:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	4a66      	ldr	r2, [pc, #408]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	0019      	movs	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	4a5f      	ldr	r2, [pc, #380]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e1c:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2220      	movs	r2, #32
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	01db      	lsls	r3, r3, #7
 8001e56:	4013      	ands	r3, r2
 8001e58:	d015      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	0899      	lsrs	r1, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1a      	ldr	r2, [r3, #32]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	05db      	lsls	r3, r3, #23
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e78:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0249      	lsls	r1, r1, #9
 8001e82:	430a      	orrs	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	031b      	lsls	r3, r3, #12
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	039b      	lsls	r3, r3, #14
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d016      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	4a35      	ldr	r2, [pc, #212]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	03db      	lsls	r3, r3, #15
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d106      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	0449      	lsls	r1, r1, #17
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	03db      	lsls	r3, r3, #15
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d016      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	045b      	lsls	r3, r3, #17
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0449      	lsls	r1, r1, #17
 8001f16:	430a      	orrs	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d016      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	01db      	lsls	r3, r3, #7
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d106      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0249      	lsls	r1, r1, #9
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f54:	2312      	movs	r3, #18
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b006      	add	sp, #24
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	fffffcff 	.word	0xfffffcff
 8001f70:	fffeffff 	.word	0xfffeffff
 8001f74:	00001388 	.word	0x00001388
 8001f78:	efffffff 	.word	0xefffffff
 8001f7c:	fffff3ff 	.word	0xfffff3ff
 8001f80:	fff3ffff 	.word	0xfff3ffff
 8001f84:	ffcfffff 	.word	0xffcfffff
 8001f88:	ffffcfff 	.word	0xffffcfff
 8001f8c:	ffbfffff 	.word	0xffbfffff
 8001f90:	feffffff 	.word	0xfeffffff
 8001f94:	ffff3fff 	.word	0xffff3fff

08001f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e046      	b.n	8002038 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2288      	movs	r2, #136	; 0x88
 8001fae:	589b      	ldr	r3, [r3, r2]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2284      	movs	r2, #132	; 0x84
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7fe fce2 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2288      	movs	r2, #136	; 0x88
 8001fc8:	2124      	movs	r1, #36	; 0x24
 8001fca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f8cc 	bl	800217c <UART_SetConfig>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e024      	b.n	8002038 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 fb7d 	bl	80026f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	490d      	ldr	r1, [pc, #52]	; (8002040 <HAL_UART_Init+0xa8>)
 800200a:	400a      	ands	r2, r1
 800200c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	212a      	movs	r1, #42	; 0x2a
 800201a:	438a      	bics	r2, r1
 800201c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 fc15 	bl	8002860 <UART_CheckIdleState>
 8002036:	0003      	movs	r3, r0
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}
 8002040:	ffffb7ff 	.word	0xffffb7ff

08002044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2288      	movs	r2, #136	; 0x88
 8002058:	589b      	ldr	r3, [r3, r2]
 800205a:	2b20      	cmp	r3, #32
 800205c:	d000      	beq.n	8002060 <HAL_UART_Transmit+0x1c>
 800205e:	e088      	b.n	8002172 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_UART_Transmit+0x2a>
 8002066:	1dbb      	adds	r3, r7, #6
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e080      	b.n	8002174 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	015b      	lsls	r3, r3, #5
 800207a:	429a      	cmp	r2, r3
 800207c:	d109      	bne.n	8002092 <HAL_UART_Transmit+0x4e>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d001      	beq.n	8002092 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e070      	b.n	8002174 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2290      	movs	r2, #144	; 0x90
 8002096:	2100      	movs	r1, #0
 8002098:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2288      	movs	r2, #136	; 0x88
 800209e:	2121      	movs	r1, #33	; 0x21
 80020a0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020a2:	f7fe fd9d 	bl	8000be0 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1dba      	adds	r2, r7, #6
 80020ae:	2154      	movs	r1, #84	; 0x54
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1dba      	adds	r2, r7, #6
 80020b8:	2156      	movs	r1, #86	; 0x56
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	015b      	lsls	r3, r3, #5
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d108      	bne.n	80020dc <HAL_UART_Transmit+0x98>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d104      	bne.n	80020dc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e003      	b.n	80020e4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020e4:	e02c      	b.n	8002140 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	0013      	movs	r3, r2
 80020f0:	2200      	movs	r2, #0
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	f000 fc02 	bl	80028fc <UART_WaitOnFlagUntilTimeout>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e039      	b.n	8002174 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10b      	bne.n	800211e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	001a      	movs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	05d2      	lsls	r2, r2, #23
 8002112:	0dd2      	lsrs	r2, r2, #23
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	3302      	adds	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e007      	b.n	800212e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2256      	movs	r2, #86	; 0x56
 8002132:	5a9b      	ldrh	r3, [r3, r2]
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b299      	uxth	r1, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2256      	movs	r2, #86	; 0x56
 800213e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2256      	movs	r2, #86	; 0x56
 8002144:	5a9b      	ldrh	r3, [r3, r2]
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1cc      	bne.n	80020e6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	0013      	movs	r3, r2
 8002156:	2200      	movs	r2, #0
 8002158:	2140      	movs	r1, #64	; 0x40
 800215a:	f000 fbcf 	bl	80028fc <UART_WaitOnFlagUntilTimeout>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d001      	beq.n	8002166 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e006      	b.n	8002174 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2288      	movs	r2, #136	; 0x88
 800216a:	2120      	movs	r1, #32
 800216c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b008      	add	sp, #32
 800217a:	bd80      	pop	{r7, pc}

0800217c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800217c:	b5b0      	push	{r4, r5, r7, lr}
 800217e:	b090      	sub	sp, #64	; 0x40
 8002180:	af00      	add	r7, sp, #0
 8002182:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002184:	231a      	movs	r3, #26
 8002186:	2220      	movs	r2, #32
 8002188:	189b      	adds	r3, r3, r2
 800218a:	19db      	adds	r3, r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	431a      	orrs	r2, r3
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	431a      	orrs	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4aaf      	ldr	r2, [pc, #700]	; (800246c <UART_SetConfig+0x2f0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ba:	430b      	orrs	r3, r1
 80021bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4aaa      	ldr	r2, [pc, #680]	; (8002470 <UART_SetConfig+0x2f4>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0018      	movs	r0, r3
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	68d9      	ldr	r1, [r3, #12]
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	0003      	movs	r3, r0
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4aa4      	ldr	r2, [pc, #656]	; (8002474 <UART_SetConfig+0x2f8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ee:	4313      	orrs	r3, r2
 80021f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a9f      	ldr	r2, [pc, #636]	; (8002478 <UART_SetConfig+0x2fc>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002204:	430b      	orrs	r3, r1
 8002206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	220f      	movs	r2, #15
 8002210:	4393      	bics	r3, r2
 8002212:	0018      	movs	r0, r3
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	0003      	movs	r3, r0
 800221e:	430b      	orrs	r3, r1
 8002220:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a95      	ldr	r2, [pc, #596]	; (800247c <UART_SetConfig+0x300>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d131      	bne.n	8002290 <UART_SetConfig+0x114>
 800222c:	4b94      	ldr	r3, [pc, #592]	; (8002480 <UART_SetConfig+0x304>)
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	2203      	movs	r2, #3
 8002232:	4013      	ands	r3, r2
 8002234:	2b03      	cmp	r3, #3
 8002236:	d01d      	beq.n	8002274 <UART_SetConfig+0xf8>
 8002238:	d823      	bhi.n	8002282 <UART_SetConfig+0x106>
 800223a:	2b02      	cmp	r3, #2
 800223c:	d00c      	beq.n	8002258 <UART_SetConfig+0xdc>
 800223e:	d820      	bhi.n	8002282 <UART_SetConfig+0x106>
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <UART_SetConfig+0xce>
 8002244:	2b01      	cmp	r3, #1
 8002246:	d00e      	beq.n	8002266 <UART_SetConfig+0xea>
 8002248:	e01b      	b.n	8002282 <UART_SetConfig+0x106>
 800224a:	231b      	movs	r3, #27
 800224c:	2220      	movs	r2, #32
 800224e:	189b      	adds	r3, r3, r2
 8002250:	19db      	adds	r3, r3, r7
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e0b4      	b.n	80023c2 <UART_SetConfig+0x246>
 8002258:	231b      	movs	r3, #27
 800225a:	2220      	movs	r2, #32
 800225c:	189b      	adds	r3, r3, r2
 800225e:	19db      	adds	r3, r3, r7
 8002260:	2202      	movs	r2, #2
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e0ad      	b.n	80023c2 <UART_SetConfig+0x246>
 8002266:	231b      	movs	r3, #27
 8002268:	2220      	movs	r2, #32
 800226a:	189b      	adds	r3, r3, r2
 800226c:	19db      	adds	r3, r3, r7
 800226e:	2204      	movs	r2, #4
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e0a6      	b.n	80023c2 <UART_SetConfig+0x246>
 8002274:	231b      	movs	r3, #27
 8002276:	2220      	movs	r2, #32
 8002278:	189b      	adds	r3, r3, r2
 800227a:	19db      	adds	r3, r3, r7
 800227c:	2208      	movs	r2, #8
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e09f      	b.n	80023c2 <UART_SetConfig+0x246>
 8002282:	231b      	movs	r3, #27
 8002284:	2220      	movs	r2, #32
 8002286:	189b      	adds	r3, r3, r2
 8002288:	19db      	adds	r3, r3, r7
 800228a:	2210      	movs	r2, #16
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e098      	b.n	80023c2 <UART_SetConfig+0x246>
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7b      	ldr	r2, [pc, #492]	; (8002484 <UART_SetConfig+0x308>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d131      	bne.n	80022fe <UART_SetConfig+0x182>
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <UART_SetConfig+0x304>)
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	220c      	movs	r2, #12
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d01d      	beq.n	80022e2 <UART_SetConfig+0x166>
 80022a6:	d823      	bhi.n	80022f0 <UART_SetConfig+0x174>
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d00c      	beq.n	80022c6 <UART_SetConfig+0x14a>
 80022ac:	d820      	bhi.n	80022f0 <UART_SetConfig+0x174>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <UART_SetConfig+0x13c>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d00e      	beq.n	80022d4 <UART_SetConfig+0x158>
 80022b6:	e01b      	b.n	80022f0 <UART_SetConfig+0x174>
 80022b8:	231b      	movs	r3, #27
 80022ba:	2220      	movs	r2, #32
 80022bc:	189b      	adds	r3, r3, r2
 80022be:	19db      	adds	r3, r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e07d      	b.n	80023c2 <UART_SetConfig+0x246>
 80022c6:	231b      	movs	r3, #27
 80022c8:	2220      	movs	r2, #32
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	19db      	adds	r3, r3, r7
 80022ce:	2202      	movs	r2, #2
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e076      	b.n	80023c2 <UART_SetConfig+0x246>
 80022d4:	231b      	movs	r3, #27
 80022d6:	2220      	movs	r2, #32
 80022d8:	189b      	adds	r3, r3, r2
 80022da:	19db      	adds	r3, r3, r7
 80022dc:	2204      	movs	r2, #4
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e06f      	b.n	80023c2 <UART_SetConfig+0x246>
 80022e2:	231b      	movs	r3, #27
 80022e4:	2220      	movs	r2, #32
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	19db      	adds	r3, r3, r7
 80022ea:	2208      	movs	r2, #8
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e068      	b.n	80023c2 <UART_SetConfig+0x246>
 80022f0:	231b      	movs	r3, #27
 80022f2:	2220      	movs	r2, #32
 80022f4:	189b      	adds	r3, r3, r2
 80022f6:	19db      	adds	r3, r3, r7
 80022f8:	2210      	movs	r2, #16
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e061      	b.n	80023c2 <UART_SetConfig+0x246>
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a61      	ldr	r2, [pc, #388]	; (8002488 <UART_SetConfig+0x30c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d106      	bne.n	8002316 <UART_SetConfig+0x19a>
 8002308:	231b      	movs	r3, #27
 800230a:	2220      	movs	r2, #32
 800230c:	189b      	adds	r3, r3, r2
 800230e:	19db      	adds	r3, r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e055      	b.n	80023c2 <UART_SetConfig+0x246>
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a5c      	ldr	r2, [pc, #368]	; (800248c <UART_SetConfig+0x310>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d106      	bne.n	800232e <UART_SetConfig+0x1b2>
 8002320:	231b      	movs	r3, #27
 8002322:	2220      	movs	r2, #32
 8002324:	189b      	adds	r3, r3, r2
 8002326:	19db      	adds	r3, r3, r7
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e049      	b.n	80023c2 <UART_SetConfig+0x246>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a50      	ldr	r2, [pc, #320]	; (8002474 <UART_SetConfig+0x2f8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d13e      	bne.n	80023b6 <UART_SetConfig+0x23a>
 8002338:	4b51      	ldr	r3, [pc, #324]	; (8002480 <UART_SetConfig+0x304>)
 800233a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800233c:	23c0      	movs	r3, #192	; 0xc0
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4013      	ands	r3, r2
 8002342:	22c0      	movs	r2, #192	; 0xc0
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	4293      	cmp	r3, r2
 8002348:	d027      	beq.n	800239a <UART_SetConfig+0x21e>
 800234a:	22c0      	movs	r2, #192	; 0xc0
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	4293      	cmp	r3, r2
 8002350:	d82a      	bhi.n	80023a8 <UART_SetConfig+0x22c>
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	4293      	cmp	r3, r2
 8002358:	d011      	beq.n	800237e <UART_SetConfig+0x202>
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	4293      	cmp	r3, r2
 8002360:	d822      	bhi.n	80023a8 <UART_SetConfig+0x22c>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <UART_SetConfig+0x1f4>
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	00d2      	lsls	r2, r2, #3
 800236a:	4293      	cmp	r3, r2
 800236c:	d00e      	beq.n	800238c <UART_SetConfig+0x210>
 800236e:	e01b      	b.n	80023a8 <UART_SetConfig+0x22c>
 8002370:	231b      	movs	r3, #27
 8002372:	2220      	movs	r2, #32
 8002374:	189b      	adds	r3, r3, r2
 8002376:	19db      	adds	r3, r3, r7
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e021      	b.n	80023c2 <UART_SetConfig+0x246>
 800237e:	231b      	movs	r3, #27
 8002380:	2220      	movs	r2, #32
 8002382:	189b      	adds	r3, r3, r2
 8002384:	19db      	adds	r3, r3, r7
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e01a      	b.n	80023c2 <UART_SetConfig+0x246>
 800238c:	231b      	movs	r3, #27
 800238e:	2220      	movs	r2, #32
 8002390:	189b      	adds	r3, r3, r2
 8002392:	19db      	adds	r3, r3, r7
 8002394:	2204      	movs	r2, #4
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	e013      	b.n	80023c2 <UART_SetConfig+0x246>
 800239a:	231b      	movs	r3, #27
 800239c:	2220      	movs	r2, #32
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	19db      	adds	r3, r3, r7
 80023a2:	2208      	movs	r2, #8
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e00c      	b.n	80023c2 <UART_SetConfig+0x246>
 80023a8:	231b      	movs	r3, #27
 80023aa:	2220      	movs	r2, #32
 80023ac:	189b      	adds	r3, r3, r2
 80023ae:	19db      	adds	r3, r3, r7
 80023b0:	2210      	movs	r2, #16
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e005      	b.n	80023c2 <UART_SetConfig+0x246>
 80023b6:	231b      	movs	r3, #27
 80023b8:	2220      	movs	r2, #32
 80023ba:	189b      	adds	r3, r3, r2
 80023bc:	19db      	adds	r3, r3, r7
 80023be:	2210      	movs	r2, #16
 80023c0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <UART_SetConfig+0x2f8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d000      	beq.n	80023ce <UART_SetConfig+0x252>
 80023cc:	e0a9      	b.n	8002522 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80023ce:	231b      	movs	r3, #27
 80023d0:	2220      	movs	r2, #32
 80023d2:	189b      	adds	r3, r3, r2
 80023d4:	19db      	adds	r3, r3, r7
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d015      	beq.n	8002408 <UART_SetConfig+0x28c>
 80023dc:	dc18      	bgt.n	8002410 <UART_SetConfig+0x294>
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d00d      	beq.n	80023fe <UART_SetConfig+0x282>
 80023e2:	dc15      	bgt.n	8002410 <UART_SetConfig+0x294>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <UART_SetConfig+0x272>
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d005      	beq.n	80023f8 <UART_SetConfig+0x27c>
 80023ec:	e010      	b.n	8002410 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023ee:	f7ff fc05 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 80023f2:	0003      	movs	r3, r0
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023f6:	e014      	b.n	8002422 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <UART_SetConfig+0x314>)
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023fc:	e011      	b.n	8002422 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023fe:	f7ff fb71 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8002402:	0003      	movs	r3, r0
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002406:	e00c      	b.n	8002422 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800240e:	e008      	b.n	8002422 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002414:	231a      	movs	r3, #26
 8002416:	2220      	movs	r2, #32
 8002418:	189b      	adds	r3, r3, r2
 800241a:	19db      	adds	r3, r3, r7
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
        break;
 8002420:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	2b00      	cmp	r3, #0
 8002426:	d100      	bne.n	800242a <UART_SetConfig+0x2ae>
 8002428:	e14b      	b.n	80026c2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <UART_SetConfig+0x318>)
 8002430:	0052      	lsls	r2, r2, #1
 8002432:	5ad3      	ldrh	r3, [r2, r3]
 8002434:	0019      	movs	r1, r3
 8002436:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002438:	f7fd fe6c 	bl	8000114 <__udivsi3>
 800243c:	0003      	movs	r3, r0
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	0013      	movs	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	189b      	adds	r3, r3, r2
 800244a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244c:	429a      	cmp	r2, r3
 800244e:	d305      	bcc.n	800245c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002458:	429a      	cmp	r2, r3
 800245a:	d91d      	bls.n	8002498 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800245c:	231a      	movs	r3, #26
 800245e:	2220      	movs	r2, #32
 8002460:	189b      	adds	r3, r3, r2
 8002462:	19db      	adds	r3, r3, r7
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e12b      	b.n	80026c2 <UART_SetConfig+0x546>
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	cfff69f3 	.word	0xcfff69f3
 8002470:	ffffcfff 	.word	0xffffcfff
 8002474:	40008000 	.word	0x40008000
 8002478:	11fff4ff 	.word	0x11fff4ff
 800247c:	40013800 	.word	0x40013800
 8002480:	40021000 	.word	0x40021000
 8002484:	40004400 	.word	0x40004400
 8002488:	40004800 	.word	0x40004800
 800248c:	40004c00 	.word	0x40004c00
 8002490:	00f42400 	.word	0x00f42400
 8002494:	08002eb0 	.word	0x08002eb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <UART_SetConfig+0x574>)
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	5ad3      	ldrh	r3, [r2, r3]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	69b8      	ldr	r0, [r7, #24]
 80024b6:	69f9      	ldr	r1, [r7, #28]
 80024b8:	f7fd ffa2 	bl	8000400 <__aeabi_uldivmod>
 80024bc:	0002      	movs	r2, r0
 80024be:	000b      	movs	r3, r1
 80024c0:	0e11      	lsrs	r1, r2, #24
 80024c2:	021d      	lsls	r5, r3, #8
 80024c4:	430d      	orrs	r5, r1
 80024c6:	0214      	lsls	r4, r2, #8
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68b8      	ldr	r0, [r7, #8]
 80024d6:	68f9      	ldr	r1, [r7, #12]
 80024d8:	1900      	adds	r0, r0, r4
 80024da:	4169      	adcs	r1, r5
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f7fd ff89 	bl	8000400 <__aeabi_uldivmod>
 80024ee:	0002      	movs	r2, r0
 80024f0:	000b      	movs	r3, r1
 80024f2:	0013      	movs	r3, r2
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f8:	23c0      	movs	r3, #192	; 0xc0
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d309      	bcc.n	8002514 <UART_SetConfig+0x398>
 8002500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	035b      	lsls	r3, r3, #13
 8002506:	429a      	cmp	r2, r3
 8002508:	d204      	bcs.n	8002514 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	e0d6      	b.n	80026c2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002514:	231a      	movs	r3, #26
 8002516:	2220      	movs	r2, #32
 8002518:	189b      	adds	r3, r3, r2
 800251a:	19db      	adds	r3, r3, r7
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e0cf      	b.n	80026c2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	429a      	cmp	r2, r3
 800252c:	d000      	beq.n	8002530 <UART_SetConfig+0x3b4>
 800252e:	e070      	b.n	8002612 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002530:	231b      	movs	r3, #27
 8002532:	2220      	movs	r2, #32
 8002534:	189b      	adds	r3, r3, r2
 8002536:	19db      	adds	r3, r3, r7
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b08      	cmp	r3, #8
 800253c:	d015      	beq.n	800256a <UART_SetConfig+0x3ee>
 800253e:	dc18      	bgt.n	8002572 <UART_SetConfig+0x3f6>
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00d      	beq.n	8002560 <UART_SetConfig+0x3e4>
 8002544:	dc15      	bgt.n	8002572 <UART_SetConfig+0x3f6>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <UART_SetConfig+0x3d4>
 800254a:	2b02      	cmp	r3, #2
 800254c:	d005      	beq.n	800255a <UART_SetConfig+0x3de>
 800254e:	e010      	b.n	8002572 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002550:	f7ff fb54 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002554:	0003      	movs	r3, r0
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002558:	e014      	b.n	8002584 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800255a:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <UART_SetConfig+0x578>)
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800255e:	e011      	b.n	8002584 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002560:	f7ff fac0 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8002564:	0003      	movs	r3, r0
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002568:	e00c      	b.n	8002584 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002570:	e008      	b.n	8002584 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002576:	231a      	movs	r3, #26
 8002578:	2220      	movs	r2, #32
 800257a:	189b      	adds	r3, r3, r2
 800257c:	19db      	adds	r3, r3, r7
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
        break;
 8002582:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <UART_SetConfig+0x410>
 800258a:	e09a      	b.n	80026c2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002590:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <UART_SetConfig+0x574>)
 8002592:	0052      	lsls	r2, r2, #1
 8002594:	5ad3      	ldrh	r3, [r2, r3]
 8002596:	0019      	movs	r1, r3
 8002598:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800259a:	f7fd fdbb 	bl	8000114 <__udivsi3>
 800259e:	0003      	movs	r3, r0
 80025a0:	005a      	lsls	r2, r3, #1
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	18d2      	adds	r2, r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	0019      	movs	r1, r3
 80025b0:	0010      	movs	r0, r2
 80025b2:	f7fd fdaf 	bl	8000114 <__udivsi3>
 80025b6:	0003      	movs	r3, r0
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d921      	bls.n	8002604 <UART_SetConfig+0x488>
 80025c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	025b      	lsls	r3, r3, #9
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d21c      	bcs.n	8002604 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	200e      	movs	r0, #14
 80025d0:	2420      	movs	r4, #32
 80025d2:	1903      	adds	r3, r0, r4
 80025d4:	19db      	adds	r3, r3, r7
 80025d6:	210f      	movs	r1, #15
 80025d8:	438a      	bics	r2, r1
 80025da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2207      	movs	r2, #7
 80025e4:	4013      	ands	r3, r2
 80025e6:	b299      	uxth	r1, r3
 80025e8:	1903      	adds	r3, r0, r4
 80025ea:	19db      	adds	r3, r3, r7
 80025ec:	1902      	adds	r2, r0, r4
 80025ee:	19d2      	adds	r2, r2, r7
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1902      	adds	r2, r0, r4
 80025fc:	19d2      	adds	r2, r2, r7
 80025fe:	8812      	ldrh	r2, [r2, #0]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e05e      	b.n	80026c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002604:	231a      	movs	r3, #26
 8002606:	2220      	movs	r2, #32
 8002608:	189b      	adds	r3, r3, r2
 800260a:	19db      	adds	r3, r3, r7
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e057      	b.n	80026c2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002612:	231b      	movs	r3, #27
 8002614:	2220      	movs	r2, #32
 8002616:	189b      	adds	r3, r3, r2
 8002618:	19db      	adds	r3, r3, r7
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d015      	beq.n	800264c <UART_SetConfig+0x4d0>
 8002620:	dc18      	bgt.n	8002654 <UART_SetConfig+0x4d8>
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00d      	beq.n	8002642 <UART_SetConfig+0x4c6>
 8002626:	dc15      	bgt.n	8002654 <UART_SetConfig+0x4d8>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <UART_SetConfig+0x4b6>
 800262c:	2b02      	cmp	r3, #2
 800262e:	d005      	beq.n	800263c <UART_SetConfig+0x4c0>
 8002630:	e010      	b.n	8002654 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002632:	f7ff fae3 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002636:	0003      	movs	r3, r0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800263a:	e014      	b.n	8002666 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800263c:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <UART_SetConfig+0x578>)
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002640:	e011      	b.n	8002666 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002642:	f7ff fa4f 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8002646:	0003      	movs	r3, r0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800264a:	e00c      	b.n	8002666 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002652:	e008      	b.n	8002666 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002658:	231a      	movs	r3, #26
 800265a:	2220      	movs	r2, #32
 800265c:	189b      	adds	r3, r3, r2
 800265e:	19db      	adds	r3, r3, r7
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
        break;
 8002664:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02a      	beq.n	80026c2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <UART_SetConfig+0x574>)
 8002672:	0052      	lsls	r2, r2, #1
 8002674:	5ad3      	ldrh	r3, [r2, r3]
 8002676:	0019      	movs	r1, r3
 8002678:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800267a:	f7fd fd4b 	bl	8000114 <__udivsi3>
 800267e:	0003      	movs	r3, r0
 8002680:	001a      	movs	r2, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	18d2      	adds	r2, r2, r3
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0019      	movs	r1, r3
 8002690:	0010      	movs	r0, r2
 8002692:	f7fd fd3f 	bl	8000114 <__udivsi3>
 8002696:	0003      	movs	r3, r0
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d90a      	bls.n	80026b6 <UART_SetConfig+0x53a>
 80026a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	025b      	lsls	r3, r3, #9
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d205      	bcs.n	80026b6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	e005      	b.n	80026c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80026b6:	231a      	movs	r3, #26
 80026b8:	2220      	movs	r2, #32
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	19db      	adds	r3, r3, r7
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	226a      	movs	r2, #106	; 0x6a
 80026c6:	2101      	movs	r1, #1
 80026c8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	2268      	movs	r2, #104	; 0x68
 80026ce:	2101      	movs	r1, #1
 80026d0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	2200      	movs	r2, #0
 80026d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	2200      	movs	r2, #0
 80026dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80026de:	231a      	movs	r3, #26
 80026e0:	2220      	movs	r2, #32
 80026e2:	189b      	adds	r3, r3, r2
 80026e4:	19db      	adds	r3, r3, r7
 80026e6:	781b      	ldrb	r3, [r3, #0]
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b010      	add	sp, #64	; 0x40
 80026ee:	bdb0      	pop	{r4, r5, r7, pc}
 80026f0:	08002eb0 	.word	0x08002eb0
 80026f4:	00f42400 	.word	0x00f42400

080026f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	d00b      	beq.n	8002722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a4a      	ldr	r2, [pc, #296]	; (800283c <UART_AdvFeatureConfig+0x144>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
 800272a:	d00b      	beq.n	8002744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a43      	ldr	r2, [pc, #268]	; (8002840 <UART_AdvFeatureConfig+0x148>)
 8002734:	4013      	ands	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	2204      	movs	r2, #4
 800274a:	4013      	ands	r3, r2
 800274c:	d00b      	beq.n	8002766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a3b      	ldr	r2, [pc, #236]	; (8002844 <UART_AdvFeatureConfig+0x14c>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	2208      	movs	r2, #8
 800276c:	4013      	ands	r3, r2
 800276e:	d00b      	beq.n	8002788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a34      	ldr	r2, [pc, #208]	; (8002848 <UART_AdvFeatureConfig+0x150>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	2210      	movs	r2, #16
 800278e:	4013      	ands	r3, r2
 8002790:	d00b      	beq.n	80027aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a2c      	ldr	r2, [pc, #176]	; (800284c <UART_AdvFeatureConfig+0x154>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	2220      	movs	r2, #32
 80027b0:	4013      	ands	r3, r2
 80027b2:	d00b      	beq.n	80027cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4a25      	ldr	r2, [pc, #148]	; (8002850 <UART_AdvFeatureConfig+0x158>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	2240      	movs	r2, #64	; 0x40
 80027d2:	4013      	ands	r3, r2
 80027d4:	d01d      	beq.n	8002812 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <UART_AdvFeatureConfig+0x15c>)
 80027de:	4013      	ands	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	035b      	lsls	r3, r3, #13
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10b      	bne.n	8002812 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <UART_AdvFeatureConfig+0x160>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	4013      	ands	r3, r2
 800281a:	d00b      	beq.n	8002834 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a0e      	ldr	r2, [pc, #56]	; (800285c <UART_AdvFeatureConfig+0x164>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  }
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}
 800283c:	fffdffff 	.word	0xfffdffff
 8002840:	fffeffff 	.word	0xfffeffff
 8002844:	fffbffff 	.word	0xfffbffff
 8002848:	ffff7fff 	.word	0xffff7fff
 800284c:	ffffefff 	.word	0xffffefff
 8002850:	ffffdfff 	.word	0xffffdfff
 8002854:	ffefffff 	.word	0xffefffff
 8002858:	ff9fffff 	.word	0xff9fffff
 800285c:	fff7ffff 	.word	0xfff7ffff

08002860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2290      	movs	r2, #144	; 0x90
 800286c:	2100      	movs	r1, #0
 800286e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002870:	f7fe f9b6 	bl	8000be0 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2208      	movs	r2, #8
 8002880:	4013      	ands	r3, r2
 8002882:	2b08      	cmp	r3, #8
 8002884:	d10c      	bne.n	80028a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2280      	movs	r2, #128	; 0x80
 800288a:	0391      	lsls	r1, r2, #14
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <UART_CheckIdleState+0x98>)
 8002890:	9200      	str	r2, [sp, #0]
 8002892:	2200      	movs	r2, #0
 8002894:	f000 f832 	bl	80028fc <UART_WaitOnFlagUntilTimeout>
 8002898:	1e03      	subs	r3, r0, #0
 800289a:	d001      	beq.n	80028a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e026      	b.n	80028ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d10c      	bne.n	80028c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	03d1      	lsls	r1, r2, #15
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <UART_CheckIdleState+0x98>)
 80028b8:	9200      	str	r2, [sp, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f000 f81e 	bl	80028fc <UART_WaitOnFlagUntilTimeout>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e012      	b.n	80028ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2288      	movs	r2, #136	; 0x88
 80028cc:	2120      	movs	r1, #32
 80028ce:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	228c      	movs	r2, #140	; 0x8c
 80028d4:	2120      	movs	r1, #32
 80028d6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2284      	movs	r2, #132	; 0x84
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	01ffffff 	.word	0x01ffffff

080028fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b094      	sub	sp, #80	; 0x50
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290c:	e0a7      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002910:	3301      	adds	r3, #1
 8002912:	d100      	bne.n	8002916 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002914:	e0a3      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe f963 	bl	8000be0 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <UART_WaitOnFlagUntilTimeout+0x30>
 8002926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002928:	2b00      	cmp	r3, #0
 800292a:	d13f      	bne.n	80029ac <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292c:	f3ef 8310 	mrs	r3, PRIMASK
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
 8002936:	2301      	movs	r3, #1
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	f383 8810 	msr	PRIMASK, r3
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	494e      	ldr	r1, [pc, #312]	; (8002a88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800294e:	400a      	ands	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	f383 8810 	msr	PRIMASK, r3
}
 800295c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295e:	f3ef 8310 	mrs	r3, PRIMASK
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
 8002968:	2301      	movs	r3, #1
 800296a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298a:	f383 8810 	msr	PRIMASK, r3
}
 800298e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2288      	movs	r2, #136	; 0x88
 8002994:	2120      	movs	r1, #32
 8002996:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	228c      	movs	r2, #140	; 0x8c
 800299c:	2120      	movs	r1, #32
 800299e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2284      	movs	r2, #132	; 0x84
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e069      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2204      	movs	r2, #4
 80029b4:	4013      	ands	r3, r2
 80029b6:	d052      	beq.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	401a      	ands	r2, r3
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d148      	bne.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d6:	f3ef 8310 	mrs	r3, PRIMASK
 80029da:	613b      	str	r3, [r7, #16]
  return(result);
 80029dc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e0:	2301      	movs	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f383 8810 	msr	PRIMASK, r3
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4924      	ldr	r1, [pc, #144]	; (8002a88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a08:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a0e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a12:	2301      	movs	r3, #1
 8002a14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f383 8810 	msr	PRIMASK, r3
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	438a      	bics	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2288      	movs	r2, #136	; 0x88
 8002a3e:	2120      	movs	r1, #32
 8002a40:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	228c      	movs	r2, #140	; 0x8c
 8002a46:	2120      	movs	r1, #32
 8002a48:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2290      	movs	r2, #144	; 0x90
 8002a4e:	2120      	movs	r1, #32
 8002a50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2284      	movs	r2, #132	; 0x84
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e010      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	4013      	ands	r3, r2
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	425a      	negs	r2, r3
 8002a6e:	4153      	adcs	r3, r2
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	001a      	movs	r2, r3
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d100      	bne.n	8002a7e <UART_WaitOnFlagUntilTimeout+0x182>
 8002a7c:	e747      	b.n	800290e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b014      	add	sp, #80	; 0x50
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	fffffe5f 	.word	0xfffffe5f

08002a8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2284      	movs	r2, #132	; 0x84
 8002a98:	5c9b      	ldrb	r3, [r3, r2]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e027      	b.n	8002af2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2284      	movs	r2, #132	; 0x84
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2288      	movs	r2, #136	; 0x88
 8002aae:	2124      	movs	r1, #36	; 0x24
 8002ab0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <HAL_UARTEx_DisableFifoMode+0x70>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2288      	movs	r2, #136	; 0x88
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2284      	movs	r2, #132	; 0x84
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	dfffffff 	.word	0xdfffffff

08002b00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2284      	movs	r2, #132	; 0x84
 8002b0e:	5c9b      	ldrb	r3, [r3, r2]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e02e      	b.n	8002b76 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2284      	movs	r2, #132	; 0x84
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2288      	movs	r2, #136	; 0x88
 8002b24:	2124      	movs	r1, #36	; 0x24
 8002b26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	08d9      	lsrs	r1, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f854 	bl	8002c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2288      	movs	r2, #136	; 0x88
 8002b68:	2120      	movs	r1, #32
 8002b6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2284      	movs	r2, #132	; 0x84
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2284      	movs	r2, #132	; 0x84
 8002b8e:	5c9b      	ldrb	r3, [r3, r2]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e02f      	b.n	8002bf8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2284      	movs	r2, #132	; 0x84
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2288      	movs	r2, #136	; 0x88
 8002ba4:	2124      	movs	r1, #36	; 0x24
 8002ba6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 f813 	bl	8002c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2288      	movs	r2, #136	; 0x88
 8002bea:	2120      	movs	r1, #32
 8002bec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2284      	movs	r2, #132	; 0x84
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b004      	add	sp, #16
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	f1ffffff 	.word	0xf1ffffff

08002c04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d108      	bne.n	8002c26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	226a      	movs	r2, #106	; 0x6a
 8002c18:	2101      	movs	r1, #1
 8002c1a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2268      	movs	r2, #104	; 0x68
 8002c20:	2101      	movs	r1, #1
 8002c22:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002c24:	e043      	b.n	8002cae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002c26:	260f      	movs	r6, #15
 8002c28:	19bb      	adds	r3, r7, r6
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c2e:	200e      	movs	r0, #14
 8002c30:	183b      	adds	r3, r7, r0
 8002c32:	2208      	movs	r2, #8
 8002c34:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	0e5b      	lsrs	r3, r3, #25
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	240d      	movs	r4, #13
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2107      	movs	r1, #7
 8002c46:	400a      	ands	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	0f5b      	lsrs	r3, r3, #29
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	250c      	movs	r5, #12
 8002c56:	197b      	adds	r3, r7, r5
 8002c58:	2107      	movs	r1, #7
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	197a      	adds	r2, r7, r5
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	4914      	ldr	r1, [pc, #80]	; (8002cb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c68:	5c8a      	ldrb	r2, [r1, r2]
 8002c6a:	435a      	muls	r2, r3
 8002c6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c6e:	197b      	adds	r3, r7, r5
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <UARTEx_SetNbDataToProcess+0xb8>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c76:	0019      	movs	r1, r3
 8002c78:	f7fd fad6 	bl	8000228 <__divsi3>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	b299      	uxth	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	226a      	movs	r2, #106	; 0x6a
 8002c84:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c86:	19bb      	adds	r3, r7, r6
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	193a      	adds	r2, r7, r4
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c90:	5c8a      	ldrb	r2, [r1, r2]
 8002c92:	435a      	muls	r2, r3
 8002c94:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <UARTEx_SetNbDataToProcess+0xb8>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	f7fd fac2 	bl	8000228 <__divsi3>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	b299      	uxth	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2268      	movs	r2, #104	; 0x68
 8002cac:	5299      	strh	r1, [r3, r2]
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b005      	add	sp, #20
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	08002ec8 	.word	0x08002ec8
 8002cbc:	08002ed0 	.word	0x08002ed0

08002cc0 <memset>:
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	1882      	adds	r2, r0, r2
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d100      	bne.n	8002cca <memset+0xa>
 8002cc8:	4770      	bx	lr
 8002cca:	7019      	strb	r1, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	e7f9      	b.n	8002cc4 <memset+0x4>

08002cd0 <__libc_init_array>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	4c0c      	ldr	r4, [pc, #48]	; (8002d08 <__libc_init_array+0x38>)
 8002cd6:	4d0d      	ldr	r5, [pc, #52]	; (8002d0c <__libc_init_array+0x3c>)
 8002cd8:	1b64      	subs	r4, r4, r5
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	42a6      	cmp	r6, r4
 8002cde:	d109      	bne.n	8002cf4 <__libc_init_array+0x24>
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	f000 f883 	bl	8002dec <_init>
 8002ce6:	4c0a      	ldr	r4, [pc, #40]	; (8002d10 <__libc_init_array+0x40>)
 8002ce8:	4d0a      	ldr	r5, [pc, #40]	; (8002d14 <__libc_init_array+0x44>)
 8002cea:	1b64      	subs	r4, r4, r5
 8002cec:	10a4      	asrs	r4, r4, #2
 8002cee:	42a6      	cmp	r6, r4
 8002cf0:	d105      	bne.n	8002cfe <__libc_init_array+0x2e>
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	00b3      	lsls	r3, r6, #2
 8002cf6:	58eb      	ldr	r3, [r5, r3]
 8002cf8:	4798      	blx	r3
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7ee      	b.n	8002cdc <__libc_init_array+0xc>
 8002cfe:	00b3      	lsls	r3, r6, #2
 8002d00:	58eb      	ldr	r3, [r5, r3]
 8002d02:	4798      	blx	r3
 8002d04:	3601      	adds	r6, #1
 8002d06:	e7f2      	b.n	8002cee <__libc_init_array+0x1e>
 8002d08:	08002ee0 	.word	0x08002ee0
 8002d0c:	08002ee0 	.word	0x08002ee0
 8002d10:	08002ee8 	.word	0x08002ee8
 8002d14:	08002ee0 	.word	0x08002ee0

08002d18 <__retarget_lock_acquire_recursive>:
 8002d18:	4770      	bx	lr

08002d1a <__retarget_lock_release_recursive>:
 8002d1a:	4770      	bx	lr

08002d1c <register_fini>:
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <register_fini+0x10>)
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <register_fini+0xe>
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <register_fini+0x14>)
 8002d26:	f000 f805 	bl	8002d34 <atexit>
 8002d2a:	bd10      	pop	{r4, pc}
 8002d2c:	00000000 	.word	0x00000000
 8002d30:	08002d45 	.word	0x08002d45

08002d34 <atexit>:
 8002d34:	2300      	movs	r3, #0
 8002d36:	b510      	push	{r4, lr}
 8002d38:	0001      	movs	r1, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f815 	bl	8002d6c <__register_exitproc>
 8002d42:	bd10      	pop	{r4, pc}

08002d44 <__libc_fini_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	4c07      	ldr	r4, [pc, #28]	; (8002d64 <__libc_fini_array+0x20>)
 8002d48:	4d07      	ldr	r5, [pc, #28]	; (8002d68 <__libc_fini_array+0x24>)
 8002d4a:	1b64      	subs	r4, r4, r5
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	2c00      	cmp	r4, #0
 8002d50:	d102      	bne.n	8002d58 <__libc_fini_array+0x14>
 8002d52:	f000 f851 	bl	8002df8 <_fini>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	3c01      	subs	r4, #1
 8002d5a:	00a3      	lsls	r3, r4, #2
 8002d5c:	58eb      	ldr	r3, [r5, r3]
 8002d5e:	4798      	blx	r3
 8002d60:	e7f5      	b.n	8002d4e <__libc_fini_array+0xa>
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	08002eec 	.word	0x08002eec
 8002d68:	08002ee8 	.word	0x08002ee8

08002d6c <__register_exitproc>:
 8002d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d6e:	4f1c      	ldr	r7, [pc, #112]	; (8002de0 <__register_exitproc+0x74>)
 8002d70:	0004      	movs	r4, r0
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	0016      	movs	r6, r2
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	9100      	str	r1, [sp, #0]
 8002d7a:	f7ff ffcd 	bl	8002d18 <__retarget_lock_acquire_recursive>
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <__register_exitproc+0x78>)
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <__register_exitproc+0x1e>
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <__register_exitproc+0x7c>)
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	6838      	ldr	r0, [r7, #0]
 8002d8e:	2a1f      	cmp	r2, #31
 8002d90:	dd04      	ble.n	8002d9c <__register_exitproc+0x30>
 8002d92:	f7ff ffc2 	bl	8002d1a <__retarget_lock_release_recursive>
 8002d96:	2001      	movs	r0, #1
 8002d98:	4240      	negs	r0, r0
 8002d9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d9c:	2c00      	cmp	r4, #0
 8002d9e:	d014      	beq.n	8002dca <__register_exitproc+0x5e>
 8002da0:	0091      	lsls	r1, r2, #2
 8002da2:	1859      	adds	r1, r3, r1
 8002da4:	000f      	movs	r7, r1
 8002da6:	3788      	adds	r7, #136	; 0x88
 8002da8:	603e      	str	r6, [r7, #0]
 8002daa:	2701      	movs	r7, #1
 8002dac:	001e      	movs	r6, r3
 8002dae:	4097      	lsls	r7, r2
 8002db0:	3685      	adds	r6, #133	; 0x85
 8002db2:	36ff      	adds	r6, #255	; 0xff
 8002db4:	6875      	ldr	r5, [r6, #4]
 8002db6:	31fc      	adds	r1, #252	; 0xfc
 8002db8:	433d      	orrs	r5, r7
 8002dba:	6075      	str	r5, [r6, #4]
 8002dbc:	9d01      	ldr	r5, [sp, #4]
 8002dbe:	60cd      	str	r5, [r1, #12]
 8002dc0:	2c02      	cmp	r4, #2
 8002dc2:	d102      	bne.n	8002dca <__register_exitproc+0x5e>
 8002dc4:	68b1      	ldr	r1, [r6, #8]
 8002dc6:	4339      	orrs	r1, r7
 8002dc8:	60b1      	str	r1, [r6, #8]
 8002dca:	1c51      	adds	r1, r2, #1
 8002dcc:	6059      	str	r1, [r3, #4]
 8002dce:	3202      	adds	r2, #2
 8002dd0:	9900      	ldr	r1, [sp, #0]
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	50d1      	str	r1, [r2, r3]
 8002dd6:	f7ff ffa0 	bl	8002d1a <__retarget_lock_release_recursive>
 8002dda:	2000      	movs	r0, #0
 8002ddc:	e7dd      	b.n	8002d9a <__register_exitproc+0x2e>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	2000000c 	.word	0x2000000c
 8002de4:	200000d0 	.word	0x200000d0
 8002de8:	200000d4 	.word	0x200000d4

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
